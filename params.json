{"name":"Sofa-odm","tagline":"Sofa - ODM for Couchbase","body":"# Sofa the Couchbase ODM\r\n\r\nThis library is a tiny & simplistic ODM for Couchbase. \r\n\r\nThe project is motivated by the need to handle automatically some basic principles \r\nthat can be found in relational databases like unique fields, auto-incremented keys, \r\nindexed columns and some basic requesting.\r\n\r\n## Install :\r\n\r\n```\r\nnpm install sofa-odm --save\r\n```\r\n\r\n## Functionnalities :\r\n\r\n* Document type oriented (like tables on relational databases)\r\n* CRUD operations\r\n* Filtering and paginations\r\n* Validating data before its saved\r\n* Automatically creates views for filtering\r\n* Using Promises api\r\n\r\nA lot more can be done to improve this library, but essentials tools are here\r\n\r\n## Sample code :\r\n\r\nBootstrap :\r\n\r\n```js\r\nrequire('sofa-odm')({\r\n  // connection parameters\r\n  host: 'localhost:8091',\r\n  bucket: 'default',\r\n  connectionTimeout: 50000\r\n}).then(function(couchbase) {\r\n  // registering models\r\n  require('./models/user')(couchbase);\r\n}).done();\r\n```\r\n\r\nA mapper structure :\r\n\r\n```js\r\nmodule.exports = function(couchbase) {\r\n  return couchbase.declare('user', {\r\n    // declare fields\r\n    fields: {\r\n      name: {\r\n        type: 'string',       // data type : string, number, boolean, array, object\r\n        validate: [4, 64]     // contraints, depends on data type\r\n      },\r\n      email: {\r\n        type: 'string',\r\n        validate: /S+@S+\\.S+/,\r\n        unique: true\r\n      },\r\n      password: {\r\n        type: 'string',\r\n        validate: [6, 24]\r\n      }\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nA mapper usage :\r\n\r\n```js\r\n// create an active record\r\nvar john = couchbase.get('user').create({\r\n  name: 'John Doe',\r\n  email: 'john@doe.com',\r\n  password: 'secret'\r\n});\r\n// saves the active record\r\njohn.save()\r\n  // use a email view to find the user\r\n  .then(function() {\r\n    return couchbase.get('user').find('email', 'john@doe.com');\r\n  })\r\n  // deletes the first found record\r\n  .then(function(result) {\r\n    return result.rows[0].remove();\r\n  })\r\n  .done()\r\n;\r\n```\r\n\r\n## API :\r\n\r\n### Manager\r\n\r\n* **declare** (namespace, options) : Declares a new mapper\r\n* **get** (namespace) : Gets the mapper\r\n\r\n### Mapper \r\n\r\n* **create** (properties) : Creates a new active record\r\n* **find** (viewname, filter) : Filters the specified view\r\n\r\n### Active Record\r\n\r\n* **save** : Saves the current record\r\n* **remove** : Removes the current record\r\n","google":"UA-37515588-5","note":"Don't delete this file! It's used internally to help with page regeneration."}